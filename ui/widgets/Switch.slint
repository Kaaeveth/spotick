// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

/*
 * Copied and modified from: https://github.com/slint-ui/slint/blob/666cee94687bf31ccd6327ab9afb2125554b291f/internal/compiler/widgets/fluent/switch.slint
*/

global FluentPalette {
    in-out property <ColorScheme> color-scheme: ColorScheme.dark;
    property <bool> dark-color-scheme: {
        return color-scheme == ColorScheme.dark;
    }

    // base palette
    out property <brush> foreground: dark-color-scheme ? #FFFFFF : #000000E6;
    out property <brush> accent-background: dark-color-scheme ? #c2c2c2 : #acacac;
    out property <brush> accent-foreground: dark-color-scheme ? #000000 : #FFFFFF;

    // additional palette
    out property <brush> secondary-accent-background: dark-color-scheme ? #f3fbffe6 : #a7a7a7e6;
    out property <brush> tertiary-accent-background: dark-color-scheme ? #fafdffcc : #b9b9b9cc;
    out property <brush> accent-disabled: dark-color-scheme ? #FFFFFF29 : #00000038;
    out property <brush> text-accent-foreground-disabled: dark-color-scheme ? #FFFFFF87 : #FFFFFF;
    out property <brush> text-secondary: dark-color-scheme ? #FFFFFFC9 : #00000099;
    out property <brush> text-tertiary: dark-color-scheme ? #FFFFFF8A : #00000073;
    out property <brush> text-disabled: dark-color-scheme ? #FFFFFF5E : #0000005E;
    out property <brush> control-alt-secondary: dark-color-scheme ? #0000001A : #00000005;
    out property <brush> control-alt-tertiary: dark-color-scheme ? #FFFFFF0A : #0000000F;
    out property <brush> control-alt-quartiary: dark-color-scheme ? #FFFFFF12 : #00000017;
    out property <brush> control-strong-stroke: dark-color-scheme ? #FFFFFF99 : #00000099;
    out property <brush> control-strong-stroke-disabled: dark-color-scheme ? #FFFFFF29 : #00000038;
    out property <brush> circle-border: dark-color-scheme ? @linear-gradient(180deg, #FFFFFF17 0%, #FFFFFF12 100%)
    : @linear-gradient(180deg, #0000000F 0%, #00000029 100%);
    out property <brush> focus-stroke-inner: dark-color-scheme ? #000000B3 : #FFFFFF;
    out property <brush> focus-stroke-outer: dark-color-scheme ? #FFFFFF : #000000E6;
}

component FocusBorder inherits Rectangle {
    border-width: 2px;
    border-color: FluentPalette.focus-stroke-outer;

    Rectangle {
        x: parent.border-width;
        y: parent.border-width;
        width: parent.width - 2 * parent.border-width;
        height: parent.height - 2 * parent.border-width;
        border-width: 1px;
        border-radius: parent.border-radius - 2px;
        border-color: FluentPalette.focus-stroke-inner;
    }
}

export component Switch {
    in property <bool> enabled: true;
    in-out property <bool> checked;
    out property <bool> has-focus: focus-scope.has-focus;

    callback toggled;

    private property <color> text-color: FluentPalette.foreground;

    function toggle-checked() {
        if(!root.enabled) {
            return;
        }

        root.checked = !root.checked;
        root.toggled();
    }

    min-width: 40px;
    min-height: max(20px, layout.min-height);
    vertical-stretch: 0;
    horizontal-stretch: 0;
    accessible-enabled: root.enabled;
    accessible-checkable: true;
    accessible-checked <=> root.checked;
    accessible-role: switch;
    accessible-action-default => {
        root.checked = !root.checked;
        root.toggled();
    }
    forward-focus: focus-scope;

    states [
        disabled when !root.enabled : {
            rail.background: root.checked ? FluentPalette.accent-disabled : transparent;
            rail.border-color: FluentPalette.control-strong-stroke-disabled;
            thumb.background: FluentPalette.text-disabled;
            root.text-color: FluentPalette.text-disabled;
            thumb.background: root.checked ? FluentPalette.text-accent-foreground-disabled : FluentPalette.text-secondary;
        }
        pressed when touch-area.pressed : {
            rail.background: root.checked ? FluentPalette.tertiary-accent-background : FluentPalette.control-alt-quartiary;
            thumb.width: 17px;
            thumb.height: 14px;
            thumb.border-width: root.checked ? 1px : 0;
            thumb.background: root.checked ? FluentPalette.accent-foreground : FluentPalette.text-secondary;
        }
        hover when touch-area.has-hover : {
            rail.background:  root.checked ? FluentPalette.secondary-accent-background : FluentPalette.control-alt-tertiary;
            thumb.width: 14px;
            thumb.border-width: root.checked ? 1px : 0;
            thumb.background: root.checked ? FluentPalette.accent-foreground : FluentPalette.text-secondary;
        }
        selected when root.checked : {
            rail.background: FluentPalette.accent-background;
            thumb.border-width: 1px;
            thumb.border-color: FluentPalette.circle-border;
            thumb.background: FluentPalette.accent-foreground;
        }
    ]

    layout := HorizontalLayout {
        spacing: 12px;

        VerticalLayout {
            alignment: center;

           Rectangle {
                width: 40px;
                height: 20px;

                rail := Rectangle {
                    border-radius: 10px;
                    border-width: root.checked ? 0 : 1px;
                    border-color: FluentPalette.control-strong-stroke;
                    background: FluentPalette.control-alt-secondary;
                }

                thumb := Rectangle {
                    x: root.checked ? parent.width - self.width - 4px : 4px;
                    y: (parent.height - self.height) / 2;
                    width: 12px;
                    height: self.width;
                    border-radius: self.height / 2;
                    background: FluentPalette.text-secondary;
                    border-color: FluentPalette.circle-border;

                    animate background, width { duration: 150ms; easing: linear; }
                }

                // focus border
                if root.has-focus && root.enabled : FocusBorder {
                    border-radius: rail.border-radius;
                }
            }
        }
    }

    touch-area := TouchArea {
        enabled <=> root.enabled;

        clicked => {
            root.toggle-checked();
        }
    }

    focus-scope := FocusScope {
        x:0;
        width: 0px; // Do not react on clicks
        enabled <=> root.enabled;

        key-pressed(event) => {
            if (event.text == " " || event.text == "\n") {
                 root.toggle-checked();
                 return accept;
            }
            return reject;
        }
    }
}
