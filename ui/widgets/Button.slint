export component Button inherits Rectangle {
    in property <brush> hover-background-color;
    in property <brush> background-color;
    in property <bool> animate: false;

    out property <bool> is-pressed: false;
    property <float> animation-frac: 0.9;
    property <length> original-width;
    property <length> original-height;

    init => {
        original-height = btn.height;
        original-width = btn.width;
    }

    // Animates the button by reducing its size for a short time.
    // tap-animation-end restores the original button appearance.
    function tap-animation-start() {
        if (!animate || tap-timer.running) {return;}

        original-height = btn.height;
        original-width = btn.width;

        btn.width *= animation-frac;
        btn.height *= animation-frac;
        // Shift the position so the btn stays centered
        btn.x = (original-width - btn.width) / 2;
        btn.y = (original-height - btn.height) / 2;

        tap-timer.running = true;
    }

    function tap-animation-end() {
        tap-timer.running = false;
        if (!animate) {return;}
        btn.width = original-width;
        btn.height = original-height;
        btn.x = 0;
        btn.y = 0;
    }

    pure function has-hover() -> bool {
        return (ta.mouse-x <= ta.width && ta.mouse-x >= 0)
            && (ta.mouse-y <= ta.height && ta.mouse-y >= 0);
    }

    callback clicked();

    background: ta.has-hover ? hover-background-color : background-color;
    accessible-role: button;

    btn := Rectangle {
        ta := TouchArea {
            mouse-cursor: MouseCursor.pointer;
            pointer-event(event) => {
                if event.kind == PointerEventKind.down {
                    is-pressed = true;
                    tap-animation-start();
                } else if event.kind == PointerEventKind.up {
                    is-pressed = false;
                    if has-hover() {
                        clicked();
                    }
                }
            }
            @children
        }
    }

    tap-timer := Timer {
        interval: 50ms;
        running: false;
        triggered => {
            if !is-pressed {
                tap-animation-end();
            }
        }
    }
}
